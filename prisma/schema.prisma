// prisma/schema.prisma

generator client {

  provider      = "prisma-client-js"
  binaryTargets = ["native"]

}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {

  id        String    @id @default(uuid())
  email     String    @unique
  password  String    // <--- Ensure this line exists and is correct
  name      String?   // Or String if you made it required and handled it with ?? ''
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  groupMemberships GroupMember[]
  createdGroups Group[] @relation("UserCreatedGroups")

  @@map("User")

}

model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique
  // REMOVED: members GroupMember[] - managed via GroupMember.role string and DB foreign key
}

model Group {
  id          String        @id @default(uuid())
  name        String        @unique
  description String?
  isPrivate   Boolean       @default(false)
  createdBy   String // Foreign key to User
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt


  @@map("Group")
}

model GroupMember {

  id         String   @id @default(uuid())
  name       String // Corrected from username to name
  userId     String
  groupId    String
  role       Role     @default(MEMBER)
  permissions Json    @default("{}") // e.g., { "sendMessage": true, ... }
  joinedAt   DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id])
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade) // <--- ADD THIS if you want topics to be deleted

  @@unique([userId, groupId])
  @@map("GroupMember")

}

model Topic {
  id        String   @id @default(uuid())
  title     String
  groupId   String
  createdBy String
  createdAt DateTime @default(now())

  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade) 

  @@map("Topic")
}


  group     Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  creator   User  @relation(fields: [createdBy], references: [id]) // Creator is a User
}
